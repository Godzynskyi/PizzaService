/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : Java Developer
 * Created : 04/01/2016 12:11:04
 */

package org.pizza.service.pizza_service.domain.discount;

import org.junit.*;
import org.mockito.internal.matchers.Any;

import static org.junit.Assert.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;

import org.pizza.service.pizza_service.domain.Customer;
import org.pizza.service.pizza_service.domain.DiscountCard;
import org.pizza.service.pizza_service.domain.Order;
import org.pizza.service.pizza_service.domain.Pizza;
import org.pizza.service.pizza_service.domain.discount.CardDiscount;

import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;



public class CardDiscountTest {
	Customer customer;
	List<Pizza> inMemPizzas;
	Order order;
	
	@Before
	public void before() {
		customer = new Customer("Customer");
		inMemPizzas = new ArrayList<>();
		inMemPizzas.add(new Pizza("FirstPizza", 100., Pizza.PizzaType.VEGETERIAN));
		inMemPizzas.add(new Pizza("SecondPizza", 80.0, Pizza.PizzaType.SEA));
		inMemPizzas.add(new Pizza("ThirdPizza", 91.0, Pizza.PizzaType.MEAT));
		inMemPizzas.add(new Pizza("FirstPizza", 98.0, Pizza.PizzaType.MEAT));
		
		order = new Order(customer);
		order.addCheckable(inMemPizzas.get(0), 1.);
		order.addCheckable(inMemPizzas.get(3), 1.);
		order.addCheckable(inMemPizzas.get(1), 1.);
		order.addCheckable(inMemPizzas.get(2), 1.);
		order.addCheckable(inMemPizzas.get(3), 1.);
		
	}
	
	/**
	 *
	 * @see org.pizza.service.pizza_service.domain.discount.CardDiscount#getDiscount()
	 */
	@Test
	public void getPrice10PerOfCardLessThen30PerOfOrder() {
		
		DiscountCard card = mock(DiscountCard.class);
		doReturn(new Double(1000)).when(card).getSummPrice();
		customer.setCard(Optional.of(card));
		
		Discount disc = mock(Discount.class);
		doReturn(new Double(467)).when(disc).getDiscount(order, order.getRawPrice());
		
		CardDiscount d = new CardDiscount();
		
		Double expected = 1000 * .1;
		
		Double actual = d.getDiscount(order, order.getRawPrice());
		
		assertEquals(expected, actual);
	}

	/**
	 *
	 * @see org.pizza.service.pizza_service.domain.discount.CardDiscount#getDiscount()
	 */
	@Test
	public void getPrice10PerOfCardMoreThen30PerOfOrder() {
		
		DiscountCard card = mock(DiscountCard.class);
		doReturn(new Double(10000)).when(card).getSummPrice();
		customer.setCard(Optional.of(card));
			
		Discount disc = mock(Discount.class);
		doReturn(new Double(467)).when(disc).getDiscount(order, order.getRawPrice());
		
		CardDiscount d = new CardDiscount();
		
		Double expected = 471 * .3;
		
		Double actual = d.getDiscount(order, order.getRawPrice());
		
		assertEquals(expected, actual);
	}

	
}
